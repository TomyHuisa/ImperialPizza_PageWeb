"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/register/page",{

/***/ "(app-pages-browser)/./lib/pocketbase.ts":
/*!***************************!*\
  !*** ./lib/pocketbase.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var pocketbase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pocketbase */ \"(app-pages-browser)/./node_modules/pocketbase/dist/pocketbase.es.mjs\");\n\nclass PocketBaseService {\n    static getInstance() {\n        if (!PocketBaseService.instance) {\n            PocketBaseService.instance = new pocketbase__WEBPACK_IMPORTED_MODULE_0__[\"default\"](PocketBaseService.url);\n            // Persistencia de autenticación - COMPATIBLE CON VERSIONES ANTERIORES\n            PocketBaseService.instance.authStore.onChange(()=>{\n                if (true) {\n                    const authData = {\n                        token: PocketBaseService.instance.authStore.token,\n                        model: PocketBaseService.instance.authStore.model\n                    };\n                    localStorage.setItem(\"pocketbase_auth\", JSON.stringify(authData));\n                }\n            });\n            // Recuperar autenticación al inicializar - COMPATIBLE CON VERSIONES ANTERIORES\n            if (true) {\n                const savedAuth = localStorage.getItem(\"pocketbase_auth\");\n                if (savedAuth) {\n                    try {\n                        const { token, model } = JSON.parse(savedAuth);\n                        if (token && model) {\n                            PocketBaseService.instance.authStore.save(token, model);\n                        }\n                    } catch (error) {\n                        console.error(\"Error loading saved auth:\", error);\n                        localStorage.removeItem(\"pocketbase_auth\");\n                    }\n                }\n            }\n        }\n        return PocketBaseService.instance;\n    }\n    // Método para autenticación con username/phone - OPTIMIZADO\n    static async login(username, password) {\n        const pb = this.getInstance();\n        try {\n            // Buscar usuario por username O teléfono en una sola consulta\n            const user = await pb.collection(\"users\").getFirstListItem('username=\"'.concat(username, '\" || phone=\"').concat(username, '\"'));\n            return await pb.collection(\"users\").authWithPassword(user.email, password);\n        } catch (error) {\n            throw new Error(\"Usuario o contrase\\xf1a incorrectos\");\n        }\n    }\n    // Método para registro - SIMPLIFICADO y CORREGIDO\n    static async register(username, phone, password) {\n        const pb = this.getInstance();\n        try {\n            // Generar email único\n            const timestamp = Date.now();\n            const randomSuffix = Math.random().toString(36).substring(2, 8);\n            const tempEmail = \"\".concat(username.toLowerCase().replace(/\\s+/g, \"\"), \"_@pizzeriaimperial.com\");\n            // Datos mínimos y correctos para PocketBase\n            const data = {\n                username: username,\n                email: tempEmail,\n                emailVisibility: true,\n                password: password,\n                passwordConfirm: password,\n                phone: phone,\n                name: username\n            };\n            console.log(\"Intentando crear usuario con datos:\", data);\n            // Crear el usuario directamente\n            const result = await pb.collection(\"users\").create(data);\n            // Autenticar después del registro exitoso\n            await pb.collection(\"users\").authWithPassword(tempEmail, password);\n            return result;\n        } catch (error) {\n            console.error(\"Error completo del registro:\", error);\n            // Proporcionar mensajes de error más detallados\n            if (error.data && error.data.data) {\n                const fieldErrors = error.data.data;\n                if (fieldErrors.username) {\n                    throw new Error(\"Nombre de usuario: \".concat(fieldErrors.username.message));\n                }\n                if (fieldErrors.email) {\n                    throw new Error(\"Email: \".concat(fieldErrors.email.message));\n                }\n                if (fieldErrors.phone) {\n                    throw new Error(\"Tel\\xe9fono: \".concat(fieldErrors.phone.message));\n                }\n                if (fieldErrors.password) {\n                    throw new Error(\"Contrase\\xf1a: \".concat(fieldErrors.password.message));\n                }\n            }\n            throw new Error(error.message || \"Error al crear la cuenta. Por favor verifica los datos.\");\n        }\n    }\n    // Resto de los métodos permanecen igual...\n    static logout() {\n        const pb = this.getInstance();\n        pb.authStore.clear();\n        if (true) {\n            localStorage.removeItem(\"pocketbase_auth\");\n        }\n    }\n    static isAuthenticated() {\n        const pb = this.getInstance();\n        return pb.authStore.isValid;\n    }\n    static getCurrentUser() {\n        const pb = this.getInstance();\n        return pb.authStore.model;\n    }\n    static async updateProfile(userId, data) {\n        const pb = this.getInstance();\n        return await pb.collection(\"users\").update(userId, data);\n    }\n    static async createOrder(orderData) {\n        const pb = this.getInstance();\n        return await pb.collection(\"orders\").create(orderData);\n    }\n    static async getUserOrders(userId) {\n        const pb = this.getInstance();\n        try {\n            return await pb.collection(\"orders\").getFullList({\n                filter: 'user = \"'.concat(userId, '\"'),\n                sort: \"-created\"\n            });\n        } catch (error) {\n            console.error(\"Error getting user orders:\", error);\n            return [];\n        }\n    }\n    static async getUsers() {\n        const pb = this.getInstance();\n        return await pb.collection(\"users\").getFullList();\n    }\n}\nPocketBaseService.url = \"http://127.0.0.1:8090\" || 0;\n/* harmony default export */ __webpack_exports__[\"default\"] = (PocketBaseService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/pocketbase.ts\n"));

/***/ })

});